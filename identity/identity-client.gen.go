// Package identity provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package identity

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostCoreGetAssignedAdministrativeRights request
	PostCoreGetAssignedAdministrativeRights(ctx context.Context, params *PostCoreGetAssignedAdministrativeRightsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2AuthorizeAppId request
	PostOAuth2AuthorizeAppId(ctx context.Context, appId string, params *PostOAuth2AuthorizeAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2ConfirmAppId request
	PostOAuth2ConfirmAppId(ctx context.Context, appId string, params *PostOAuth2ConfirmAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2EndSessionAppId request
	PostOAuth2EndSessionAppId(ctx context.Context, appId string, params *PostOAuth2EndSessionAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2GetMeta request
	PostOAuth2GetMeta(ctx context.Context, params *PostOAuth2GetMetaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2IntrospectAppIdWithBody request with any body
	PostOAuth2IntrospectAppIdWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOAuth2IntrospectAppIdWithFormdataBody(ctx context.Context, appId string, body PostOAuth2IntrospectAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2KeysAppId request
	PostOAuth2KeysAppId(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2RevokeAppIdWithBody request with any body
	PostOAuth2RevokeAppIdWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOAuth2RevokeAppIdWithFormdataBody(ctx context.Context, appId string, body PostOAuth2RevokeAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2TokenAppIdWithBody request with any body
	PostOAuth2TokenAppIdWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOAuth2TokenAppIdWithFormdataBody(ctx context.Context, appId string, body PostOAuth2TokenAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOAuth2UserInfoAppId request
	PostOAuth2UserInfoAppId(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesAssignSuperRightsWithBody request with any body
	PostRolesAssignSuperRightsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesAssignSuperRights(ctx context.Context, body PostRolesAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesGetRole request
	PostRolesGetRole(ctx context.Context, params *PostRolesGetRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesGetRoleMembers request
	PostRolesGetRoleMembers(ctx context.Context, params *PostRolesGetRoleMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesSetDynamicRoleScriptWithBody request with any body
	PostRolesSetDynamicRoleScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesSetDynamicRoleScript(ctx context.Context, body PostRolesSetDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesStoreRoleWithBody request with any body
	PostRolesStoreRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesStoreRole(ctx context.Context, body PostRolesStoreRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesTestDynamicRoleScriptWithBody request with any body
	PostRolesTestDynamicRoleScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesTestDynamicRoleScript(ctx context.Context, body PostRolesTestDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesUnAssignSuperRightsWithBody request with any body
	PostRolesUnAssignSuperRightsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesUnAssignSuperRights(ctx context.Context, body PostRolesUnAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRolesUpdateRoleWithBody request with any body
	PostRolesUpdateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRolesUpdateRole(ctx context.Context, body PostRolesUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSaasManageAddUsersAndGroupsToRoleWithBody request with any body
	PostSaasManageAddUsersAndGroupsToRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSaasManageAddUsersAndGroupsToRole(ctx context.Context, body PostSaasManageAddUsersAndGroupsToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSaasManageDeleteRolesWithBody request with any body
	PostSaasManageDeleteRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSaasManageDeleteRoles(ctx context.Context, body PostSaasManageDeleteRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSaasManageGetRoleApps request
	PostSaasManageGetRoleApps(ctx context.Context, params *PostSaasManageGetRoleAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSaasManageRemoveUsersAndGroupsFromRoleWithBody request with any body
	PostSaasManageRemoveUsersAndGroupsFromRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSaasManageRemoveUsersAndGroupsFromRole(ctx context.Context, body PostSaasManageRemoveUsersAndGroupsFromRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityAdvanceAuthenticationWithBody request with any body
	PostSecurityAdvanceAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityAdvanceAuthentication(ctx context.Context, body PostSecurityAdvanceAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityAdvanceForgotUsernameWithBody request with any body
	PostSecurityAdvanceForgotUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityAdvanceForgotUsername(ctx context.Context, body PostSecurityAdvanceForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityAnswerOOBChallengeWithBody request with any body
	PostSecurityAnswerOOBChallengeWithBody(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityAnswerOOBChallenge(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, body PostSecurityAnswerOOBChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityChallengeUser request
	PostSecurityChallengeUser(ctx context.Context, params *PostSecurityChallengeUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityForgotUsernameWithBody request with any body
	PostSecurityForgotUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityForgotUsername(ctx context.Context, body PostSecurityForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityLogoutWithBody request with any body
	PostSecurityLogoutWithBody(ctx context.Context, params *PostSecurityLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityLogout(ctx context.Context, params *PostSecurityLogoutParams, body PostSecurityLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityStartAuthenticationWithBody request with any body
	PostSecurityStartAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityStartAuthentication(ctx context.Context, body PostSecurityStartAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityStartChallengeWithBody request with any body
	PostSecurityStartChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityStartChallenge(ctx context.Context, body PostSecurityStartChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityStartForgotUsernameWithBody request with any body
	PostSecurityStartForgotUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityStartForgotUsername(ctx context.Context, body PostSecurityStartForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityStartQRCodeAuthenticationWithBody request with any body
	PostSecurityStartQRCodeAuthenticationWithBody(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityStartQRCodeAuthentication(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, body PostSecurityStartQRCodeAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecurityStartSocialAuthenticationWithBody request with any body
	PostSecurityStartSocialAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecurityStartSocialAuthentication(ctx context.Context, body PostSecurityStartSocialAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecuritySubmitOathOtpCodeWithBody request with any body
	PostSecuritySubmitOathOtpCodeWithBody(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecuritySubmitOathOtpCode(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, body PostSecuritySubmitOathOtpCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecuritySubmitQRCodeWithBody request with any body
	PostSecuritySubmitQRCodeWithBody(ctx context.Context, params *PostSecuritySubmitQRCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecuritySubmitQRCode(ctx context.Context, params *PostSecuritySubmitQRCodeParams, body PostSecuritySubmitQRCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostU2fAnswerRegistrationChallengeWithBody request with any body
	PostU2fAnswerRegistrationChallengeWithBody(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostU2fAnswerRegistrationChallenge(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, body PostU2fAnswerRegistrationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserMgmtSignOutCurrentSession request
	PostUserMgmtSignOutCurrentSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserMgmtSignOutEverywhere request
	PostUserMgmtSignOutEverywhere(ctx context.Context, params *PostUserMgmtSignOutEverywhereParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostCoreGetAssignedAdministrativeRights(ctx context.Context, params *PostCoreGetAssignedAdministrativeRightsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCoreGetAssignedAdministrativeRightsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2AuthorizeAppId(ctx context.Context, appId string, params *PostOAuth2AuthorizeAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2AuthorizeAppIdRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2ConfirmAppId(ctx context.Context, appId string, params *PostOAuth2ConfirmAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2ConfirmAppIdRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2EndSessionAppId(ctx context.Context, appId string, params *PostOAuth2EndSessionAppIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2EndSessionAppIdRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2GetMeta(ctx context.Context, params *PostOAuth2GetMetaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2GetMetaRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2IntrospectAppIdWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2IntrospectAppIdRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2IntrospectAppIdWithFormdataBody(ctx context.Context, appId string, body PostOAuth2IntrospectAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2IntrospectAppIdRequestWithFormdataBody(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2KeysAppId(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2KeysAppIdRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2RevokeAppIdWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2RevokeAppIdRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2RevokeAppIdWithFormdataBody(ctx context.Context, appId string, body PostOAuth2RevokeAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2RevokeAppIdRequestWithFormdataBody(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2TokenAppIdWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2TokenAppIdRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2TokenAppIdWithFormdataBody(ctx context.Context, appId string, body PostOAuth2TokenAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2TokenAppIdRequestWithFormdataBody(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2UserInfoAppId(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOAuth2UserInfoAppIdRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesAssignSuperRightsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesAssignSuperRightsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesAssignSuperRights(ctx context.Context, body PostRolesAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesAssignSuperRightsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesGetRole(ctx context.Context, params *PostRolesGetRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesGetRoleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesGetRoleMembers(ctx context.Context, params *PostRolesGetRoleMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesGetRoleMembersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesSetDynamicRoleScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesSetDynamicRoleScriptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesSetDynamicRoleScript(ctx context.Context, body PostRolesSetDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesSetDynamicRoleScriptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesStoreRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesStoreRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesStoreRole(ctx context.Context, body PostRolesStoreRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesStoreRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesTestDynamicRoleScriptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesTestDynamicRoleScriptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesTestDynamicRoleScript(ctx context.Context, body PostRolesTestDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesTestDynamicRoleScriptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesUnAssignSuperRightsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesUnAssignSuperRightsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesUnAssignSuperRights(ctx context.Context, body PostRolesUnAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesUnAssignSuperRightsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesUpdateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesUpdateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRolesUpdateRole(ctx context.Context, body PostRolesUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRolesUpdateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageAddUsersAndGroupsToRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageAddUsersAndGroupsToRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageAddUsersAndGroupsToRole(ctx context.Context, body PostSaasManageAddUsersAndGroupsToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageAddUsersAndGroupsToRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageDeleteRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageDeleteRolesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageDeleteRoles(ctx context.Context, body PostSaasManageDeleteRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageDeleteRolesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageGetRoleApps(ctx context.Context, params *PostSaasManageGetRoleAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageGetRoleAppsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageRemoveUsersAndGroupsFromRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageRemoveUsersAndGroupsFromRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSaasManageRemoveUsersAndGroupsFromRole(ctx context.Context, body PostSaasManageRemoveUsersAndGroupsFromRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSaasManageRemoveUsersAndGroupsFromRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityAdvanceAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityAdvanceAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityAdvanceAuthentication(ctx context.Context, body PostSecurityAdvanceAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityAdvanceAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityAdvanceForgotUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityAdvanceForgotUsernameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityAdvanceForgotUsername(ctx context.Context, body PostSecurityAdvanceForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityAdvanceForgotUsernameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityAnswerOOBChallengeWithBody(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityAnswerOOBChallengeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityAnswerOOBChallenge(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, body PostSecurityAnswerOOBChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityAnswerOOBChallengeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityChallengeUser(ctx context.Context, params *PostSecurityChallengeUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityChallengeUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityForgotUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityForgotUsernameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityForgotUsername(ctx context.Context, body PostSecurityForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityForgotUsernameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityLogoutWithBody(ctx context.Context, params *PostSecurityLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityLogoutRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityLogout(ctx context.Context, params *PostSecurityLogoutParams, body PostSecurityLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityLogoutRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartAuthentication(ctx context.Context, body PostSecurityStartAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartChallengeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartChallenge(ctx context.Context, body PostSecurityStartChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartChallengeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartForgotUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartForgotUsernameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartForgotUsername(ctx context.Context, body PostSecurityStartForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartForgotUsernameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartQRCodeAuthenticationWithBody(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartQRCodeAuthenticationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartQRCodeAuthentication(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, body PostSecurityStartQRCodeAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartQRCodeAuthenticationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartSocialAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartSocialAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecurityStartSocialAuthentication(ctx context.Context, body PostSecurityStartSocialAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecurityStartSocialAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecuritySubmitOathOtpCodeWithBody(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecuritySubmitOathOtpCodeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecuritySubmitOathOtpCode(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, body PostSecuritySubmitOathOtpCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecuritySubmitOathOtpCodeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecuritySubmitQRCodeWithBody(ctx context.Context, params *PostSecuritySubmitQRCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecuritySubmitQRCodeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecuritySubmitQRCode(ctx context.Context, params *PostSecuritySubmitQRCodeParams, body PostSecuritySubmitQRCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecuritySubmitQRCodeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostU2fAnswerRegistrationChallengeWithBody(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostU2fAnswerRegistrationChallengeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostU2fAnswerRegistrationChallenge(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, body PostU2fAnswerRegistrationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostU2fAnswerRegistrationChallengeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserMgmtSignOutCurrentSession(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserMgmtSignOutCurrentSessionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserMgmtSignOutEverywhere(ctx context.Context, params *PostUserMgmtSignOutEverywhereParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserMgmtSignOutEverywhereRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostCoreGetAssignedAdministrativeRightsRequest generates requests for PostCoreGetAssignedAdministrativeRights
func NewPostCoreGetAssignedAdministrativeRightsRequest(server string, params *PostCoreGetAssignedAdministrativeRightsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Core/GetAssignedAdministrativeRights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2AuthorizeAppIdRequest generates requests for PostOAuth2AuthorizeAppId
func NewPostOAuth2AuthorizeAppIdRequest(server string, appId string, params *PostOAuth2AuthorizeAppIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/Authorize/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Prompt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prompt", runtime.ParamLocationQuery, *params.Prompt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeChallengeMethod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge_method", runtime.ParamLocationQuery, *params.CodeChallengeMethod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeChallenge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge", runtime.ParamLocationQuery, *params.CodeChallenge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClientSecret != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_type", runtime.ParamLocationQuery, params.ResponseType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2ConfirmAppIdRequest generates requests for PostOAuth2ConfirmAppId
func NewPostOAuth2ConfirmAppIdRequest(server string, appId string, params *PostOAuth2ConfirmAppIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/Confirm/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bounce", runtime.ParamLocationQuery, params.Bounce); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Result != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "result", runtime.ParamLocationQuery, *params.Result); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, params.Scopes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deniedScopes", runtime.ParamLocationQuery, params.DeniedScopes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2EndSessionAppIdRequest generates requests for PostOAuth2EndSessionAppId
func NewPostOAuth2EndSessionAppIdRequest(server string, appId string, params *PostOAuth2EndSessionAppIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/EndSession/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PostLogoutRedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post_logout_redirect_uri", runtime.ParamLocationQuery, *params.PostLogoutRedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdTokenHint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_token_hint", runtime.ParamLocationQuery, *params.IdTokenHint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2GetMetaRequest generates requests for PostOAuth2GetMeta
func NewPostOAuth2GetMetaRequest(server string, params *PostOAuth2GetMetaParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/GetMeta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceName", runtime.ParamLocationQuery, params.ServiceName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2IntrospectAppIdRequestWithFormdataBody calls the generic PostOAuth2IntrospectAppId builder with application/x-www-form-urlencoded body
func NewPostOAuth2IntrospectAppIdRequestWithFormdataBody(server string, appId string, body PostOAuth2IntrospectAppIdFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOAuth2IntrospectAppIdRequestWithBody(server, appId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOAuth2IntrospectAppIdRequestWithBody generates requests for PostOAuth2IntrospectAppId with any type of body
func NewPostOAuth2IntrospectAppIdRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/Introspect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOAuth2KeysAppIdRequest generates requests for PostOAuth2KeysAppId
func NewPostOAuth2KeysAppIdRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/Keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2RevokeAppIdRequestWithFormdataBody calls the generic PostOAuth2RevokeAppId builder with application/x-www-form-urlencoded body
func NewPostOAuth2RevokeAppIdRequestWithFormdataBody(server string, appId string, body PostOAuth2RevokeAppIdFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOAuth2RevokeAppIdRequestWithBody(server, appId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOAuth2RevokeAppIdRequestWithBody generates requests for PostOAuth2RevokeAppId with any type of body
func NewPostOAuth2RevokeAppIdRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/Revoke/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOAuth2TokenAppIdRequestWithFormdataBody calls the generic PostOAuth2TokenAppId builder with application/x-www-form-urlencoded body
func NewPostOAuth2TokenAppIdRequestWithFormdataBody(server string, appId string, body PostOAuth2TokenAppIdFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOAuth2TokenAppIdRequestWithBody(server, appId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOAuth2TokenAppIdRequestWithBody generates requests for PostOAuth2TokenAppId with any type of body
func NewPostOAuth2TokenAppIdRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/Token/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOAuth2UserInfoAppIdRequest generates requests for PostOAuth2UserInfoAppId
func NewPostOAuth2UserInfoAppIdRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "app_id", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OAuth2/UserInfo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRolesAssignSuperRightsRequest calls the generic PostRolesAssignSuperRights builder with application/json body
func NewPostRolesAssignSuperRightsRequest(server string, body PostRolesAssignSuperRightsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesAssignSuperRightsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRolesAssignSuperRightsRequestWithBody generates requests for PostRolesAssignSuperRights with any type of body
func NewPostRolesAssignSuperRightsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/AssignSuperRights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRolesGetRoleRequest generates requests for PostRolesGetRole
func NewPostRolesGetRoleRequest(server string, params *PostRolesGetRoleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/GetRole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SuppressPrincipalsList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SuppressPrincipalsList", runtime.ParamLocationQuery, *params.SuppressPrincipalsList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GetRights != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "getRights", runtime.ParamLocationQuery, *params.GetRights); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRolesGetRoleMembersRequest generates requests for PostRolesGetRoleMembers
func NewPostRolesGetRoleMembersRequest(server string, params *PostRolesGetRoleMembersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/GetRoleMembers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRolesSetDynamicRoleScriptRequest calls the generic PostRolesSetDynamicRoleScript builder with application/json body
func NewPostRolesSetDynamicRoleScriptRequest(server string, body PostRolesSetDynamicRoleScriptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesSetDynamicRoleScriptRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRolesSetDynamicRoleScriptRequestWithBody generates requests for PostRolesSetDynamicRoleScript with any type of body
func NewPostRolesSetDynamicRoleScriptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/SetDynamicRoleScript")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRolesStoreRoleRequest calls the generic PostRolesStoreRole builder with application/json body
func NewPostRolesStoreRoleRequest(server string, body PostRolesStoreRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesStoreRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRolesStoreRoleRequestWithBody generates requests for PostRolesStoreRole with any type of body
func NewPostRolesStoreRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/StoreRole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRolesTestDynamicRoleScriptRequest calls the generic PostRolesTestDynamicRoleScript builder with application/json body
func NewPostRolesTestDynamicRoleScriptRequest(server string, body PostRolesTestDynamicRoleScriptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesTestDynamicRoleScriptRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRolesTestDynamicRoleScriptRequestWithBody generates requests for PostRolesTestDynamicRoleScript with any type of body
func NewPostRolesTestDynamicRoleScriptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/TestDynamicRoleScript")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRolesUnAssignSuperRightsRequest calls the generic PostRolesUnAssignSuperRights builder with application/json body
func NewPostRolesUnAssignSuperRightsRequest(server string, body PostRolesUnAssignSuperRightsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesUnAssignSuperRightsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRolesUnAssignSuperRightsRequestWithBody generates requests for PostRolesUnAssignSuperRights with any type of body
func NewPostRolesUnAssignSuperRightsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/UnAssignSuperRights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRolesUpdateRoleRequest calls the generic PostRolesUpdateRole builder with application/json body
func NewPostRolesUpdateRoleRequest(server string, body PostRolesUpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRolesUpdateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRolesUpdateRoleRequestWithBody generates requests for PostRolesUpdateRole with any type of body
func NewPostRolesUpdateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Roles/UpdateRole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSaasManageAddUsersAndGroupsToRoleRequest calls the generic PostSaasManageAddUsersAndGroupsToRole builder with application/json body
func NewPostSaasManageAddUsersAndGroupsToRoleRequest(server string, body PostSaasManageAddUsersAndGroupsToRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSaasManageAddUsersAndGroupsToRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSaasManageAddUsersAndGroupsToRoleRequestWithBody generates requests for PostSaasManageAddUsersAndGroupsToRole with any type of body
func NewPostSaasManageAddUsersAndGroupsToRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SaasManage/AddUsersAndGroupsToRole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSaasManageDeleteRolesRequest calls the generic PostSaasManageDeleteRoles builder with application/json body
func NewPostSaasManageDeleteRolesRequest(server string, body PostSaasManageDeleteRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSaasManageDeleteRolesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSaasManageDeleteRolesRequestWithBody generates requests for PostSaasManageDeleteRoles with any type of body
func NewPostSaasManageDeleteRolesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SaasManage/DeleteRoles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSaasManageGetRoleAppsRequest generates requests for PostSaasManageGetRoleApps
func NewPostSaasManageGetRoleAppsRequest(server string, params *PostSaasManageGetRoleAppsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SaasManage/GetRoleApps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSaasManageRemoveUsersAndGroupsFromRoleRequest calls the generic PostSaasManageRemoveUsersAndGroupsFromRole builder with application/json body
func NewPostSaasManageRemoveUsersAndGroupsFromRoleRequest(server string, body PostSaasManageRemoveUsersAndGroupsFromRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSaasManageRemoveUsersAndGroupsFromRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSaasManageRemoveUsersAndGroupsFromRoleRequestWithBody generates requests for PostSaasManageRemoveUsersAndGroupsFromRole with any type of body
func NewPostSaasManageRemoveUsersAndGroupsFromRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/SaasManage/RemoveUsersAndGroupsFromRole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityAdvanceAuthenticationRequest calls the generic PostSecurityAdvanceAuthentication builder with application/json body
func NewPostSecurityAdvanceAuthenticationRequest(server string, body PostSecurityAdvanceAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityAdvanceAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityAdvanceAuthenticationRequestWithBody generates requests for PostSecurityAdvanceAuthentication with any type of body
func NewPostSecurityAdvanceAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/AdvanceAuthentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityAdvanceForgotUsernameRequest calls the generic PostSecurityAdvanceForgotUsername builder with application/json body
func NewPostSecurityAdvanceForgotUsernameRequest(server string, body PostSecurityAdvanceForgotUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityAdvanceForgotUsernameRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityAdvanceForgotUsernameRequestWithBody generates requests for PostSecurityAdvanceForgotUsername with any type of body
func NewPostSecurityAdvanceForgotUsernameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/AdvanceForgotUsername")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityAnswerOOBChallengeRequest calls the generic PostSecurityAnswerOOBChallenge builder with application/json body
func NewPostSecurityAnswerOOBChallengeRequest(server string, params *PostSecurityAnswerOOBChallengeParams, body PostSecurityAnswerOOBChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityAnswerOOBChallengeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSecurityAnswerOOBChallengeRequestWithBody generates requests for PostSecurityAnswerOOBChallenge with any type of body
func NewPostSecurityAnswerOOBChallengeRequestWithBody(server string, params *PostSecurityAnswerOOBChallengeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/AnswerOOBChallenge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "answer", runtime.ParamLocationQuery, params.Answer); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityChallengeUserRequest generates requests for PostSecurityChallengeUser
func NewPostSecurityChallengeUserRequest(server string, params *PostSecurityChallengeUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/ChallengeUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profileName", runtime.ParamLocationQuery, params.ProfileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSecurityForgotUsernameRequest calls the generic PostSecurityForgotUsername builder with application/json body
func NewPostSecurityForgotUsernameRequest(server string, body PostSecurityForgotUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityForgotUsernameRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityForgotUsernameRequestWithBody generates requests for PostSecurityForgotUsername with any type of body
func NewPostSecurityForgotUsernameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/ForgotUsername")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityLogoutRequest calls the generic PostSecurityLogout builder with application/json body
func NewPostSecurityLogoutRequest(server string, params *PostSecurityLogoutParams, body PostSecurityLogoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityLogoutRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSecurityLogoutRequestWithBody generates requests for PostSecurityLogout with any type of body
func NewPostSecurityLogoutRequestWithBody(server string, params *PostSecurityLogoutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/Logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RedirectUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirectUrl", runtime.ParamLocationQuery, *params.RedirectUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllowIWA != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "allowIWA", runtime.ParamLocationQuery, *params.AllowIWA); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityStartAuthenticationRequest calls the generic PostSecurityStartAuthentication builder with application/json body
func NewPostSecurityStartAuthenticationRequest(server string, body PostSecurityStartAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityStartAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityStartAuthenticationRequestWithBody generates requests for PostSecurityStartAuthentication with any type of body
func NewPostSecurityStartAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/StartAuthentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityStartChallengeRequest calls the generic PostSecurityStartChallenge builder with application/json body
func NewPostSecurityStartChallengeRequest(server string, body PostSecurityStartChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityStartChallengeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityStartChallengeRequestWithBody generates requests for PostSecurityStartChallenge with any type of body
func NewPostSecurityStartChallengeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/StartChallenge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityStartForgotUsernameRequest calls the generic PostSecurityStartForgotUsername builder with application/json body
func NewPostSecurityStartForgotUsernameRequest(server string, body PostSecurityStartForgotUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityStartForgotUsernameRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityStartForgotUsernameRequestWithBody generates requests for PostSecurityStartForgotUsername with any type of body
func NewPostSecurityStartForgotUsernameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/StartForgotUsername")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityStartQRCodeAuthenticationRequest calls the generic PostSecurityStartQRCodeAuthentication builder with application/json body
func NewPostSecurityStartQRCodeAuthenticationRequest(server string, params *PostSecurityStartQRCodeAuthenticationParams, body PostSecurityStartQRCodeAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityStartQRCodeAuthenticationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSecurityStartQRCodeAuthenticationRequestWithBody generates requests for PostSecurityStartQRCodeAuthentication with any type of body
func NewPostSecurityStartQRCodeAuthenticationRequestWithBody(server string, params *PostSecurityStartQRCodeAuthenticationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/StartQRCodeAuthentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guid", runtime.ParamLocationQuery, params.Guid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecurityStartSocialAuthenticationRequest calls the generic PostSecurityStartSocialAuthentication builder with application/json body
func NewPostSecurityStartSocialAuthenticationRequest(server string, body PostSecurityStartSocialAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecurityStartSocialAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSecurityStartSocialAuthenticationRequestWithBody generates requests for PostSecurityStartSocialAuthentication with any type of body
func NewPostSecurityStartSocialAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/StartSocialAuthentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecuritySubmitOathOtpCodeRequest calls the generic PostSecuritySubmitOathOtpCode builder with application/json body
func NewPostSecuritySubmitOathOtpCodeRequest(server string, params *PostSecuritySubmitOathOtpCodeParams, body PostSecuritySubmitOathOtpCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecuritySubmitOathOtpCodeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSecuritySubmitOathOtpCodeRequestWithBody generates requests for PostSecuritySubmitOathOtpCode with any type of body
func NewPostSecuritySubmitOathOtpCodeRequestWithBody(server string, params *PostSecuritySubmitOathOtpCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/SubmitOathOtpCode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "otpCode", runtime.ParamLocationQuery, params.OtpCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userUuid", runtime.ParamLocationQuery, params.UserUuid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSecuritySubmitQRCodeRequest calls the generic PostSecuritySubmitQRCode builder with application/json body
func NewPostSecuritySubmitQRCodeRequest(server string, params *PostSecuritySubmitQRCodeParams, body PostSecuritySubmitQRCodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecuritySubmitQRCodeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSecuritySubmitQRCodeRequestWithBody generates requests for PostSecuritySubmitQRCode with any type of body
func NewPostSecuritySubmitQRCodeRequestWithBody(server string, params *PostSecuritySubmitQRCodeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Security/SubmitQRCode")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sessionId", runtime.ParamLocationQuery, params.SessionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostU2fAnswerRegistrationChallengeRequest calls the generic PostU2fAnswerRegistrationChallenge builder with application/json body
func NewPostU2fAnswerRegistrationChallengeRequest(server string, params *PostU2fAnswerRegistrationChallengeParams, body PostU2fAnswerRegistrationChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostU2fAnswerRegistrationChallengeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostU2fAnswerRegistrationChallengeRequestWithBody generates requests for PostU2fAnswerRegistrationChallenge with any type of body
func NewPostU2fAnswerRegistrationChallengeRequestWithBody(server string, params *PostU2fAnswerRegistrationChallengeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/U2f/AnswerRegistrationChallenge")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rawRegisterResponse", runtime.ParamLocationQuery, params.RawRegisterResponse); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserMgmtSignOutCurrentSessionRequest generates requests for PostUserMgmtSignOutCurrentSession
func NewPostUserMgmtSignOutCurrentSessionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/UserMgmt/SignOutCurrentSession")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserMgmtSignOutEverywhereRequest generates requests for PostUserMgmtSignOutEverywhere
func NewPostUserMgmtSignOutEverywhereRequest(server string, params *PostUserMgmtSignOutEverywhereParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/UserMgmt/SignOutEverywhere")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostCoreGetAssignedAdministrativeRightsWithResponse request
	PostCoreGetAssignedAdministrativeRightsWithResponse(ctx context.Context, params *PostCoreGetAssignedAdministrativeRightsParams, reqEditors ...RequestEditorFn) (*PostCoreGetAssignedAdministrativeRightsResponse, error)

	// PostOAuth2AuthorizeAppIdWithResponse request
	PostOAuth2AuthorizeAppIdWithResponse(ctx context.Context, appId string, params *PostOAuth2AuthorizeAppIdParams, reqEditors ...RequestEditorFn) (*PostOAuth2AuthorizeAppIdResponse, error)

	// PostOAuth2ConfirmAppIdWithResponse request
	PostOAuth2ConfirmAppIdWithResponse(ctx context.Context, appId string, params *PostOAuth2ConfirmAppIdParams, reqEditors ...RequestEditorFn) (*PostOAuth2ConfirmAppIdResponse, error)

	// PostOAuth2EndSessionAppIdWithResponse request
	PostOAuth2EndSessionAppIdWithResponse(ctx context.Context, appId string, params *PostOAuth2EndSessionAppIdParams, reqEditors ...RequestEditorFn) (*PostOAuth2EndSessionAppIdResponse, error)

	// PostOAuth2GetMetaWithResponse request
	PostOAuth2GetMetaWithResponse(ctx context.Context, params *PostOAuth2GetMetaParams, reqEditors ...RequestEditorFn) (*PostOAuth2GetMetaResponse, error)

	// PostOAuth2IntrospectAppIdWithBodyWithResponse request with any body
	PostOAuth2IntrospectAppIdWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOAuth2IntrospectAppIdResponse, error)

	PostOAuth2IntrospectAppIdWithFormdataBodyWithResponse(ctx context.Context, appId string, body PostOAuth2IntrospectAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOAuth2IntrospectAppIdResponse, error)

	// PostOAuth2KeysAppIdWithResponse request
	PostOAuth2KeysAppIdWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*PostOAuth2KeysAppIdResponse, error)

	// PostOAuth2RevokeAppIdWithBodyWithResponse request with any body
	PostOAuth2RevokeAppIdWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOAuth2RevokeAppIdResponse, error)

	PostOAuth2RevokeAppIdWithFormdataBodyWithResponse(ctx context.Context, appId string, body PostOAuth2RevokeAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOAuth2RevokeAppIdResponse, error)

	// PostOAuth2TokenAppIdWithBodyWithResponse request with any body
	PostOAuth2TokenAppIdWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOAuth2TokenAppIdResponse, error)

	PostOAuth2TokenAppIdWithFormdataBodyWithResponse(ctx context.Context, appId string, body PostOAuth2TokenAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOAuth2TokenAppIdResponse, error)

	// PostOAuth2UserInfoAppIdWithResponse request
	PostOAuth2UserInfoAppIdWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*PostOAuth2UserInfoAppIdResponse, error)

	// PostRolesAssignSuperRightsWithBodyWithResponse request with any body
	PostRolesAssignSuperRightsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesAssignSuperRightsResponse, error)

	PostRolesAssignSuperRightsWithResponse(ctx context.Context, body PostRolesAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesAssignSuperRightsResponse, error)

	// PostRolesGetRoleWithResponse request
	PostRolesGetRoleWithResponse(ctx context.Context, params *PostRolesGetRoleParams, reqEditors ...RequestEditorFn) (*PostRolesGetRoleResponse, error)

	// PostRolesGetRoleMembersWithResponse request
	PostRolesGetRoleMembersWithResponse(ctx context.Context, params *PostRolesGetRoleMembersParams, reqEditors ...RequestEditorFn) (*PostRolesGetRoleMembersResponse, error)

	// PostRolesSetDynamicRoleScriptWithBodyWithResponse request with any body
	PostRolesSetDynamicRoleScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesSetDynamicRoleScriptResponse, error)

	PostRolesSetDynamicRoleScriptWithResponse(ctx context.Context, body PostRolesSetDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesSetDynamicRoleScriptResponse, error)

	// PostRolesStoreRoleWithBodyWithResponse request with any body
	PostRolesStoreRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesStoreRoleResponse, error)

	PostRolesStoreRoleWithResponse(ctx context.Context, body PostRolesStoreRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesStoreRoleResponse, error)

	// PostRolesTestDynamicRoleScriptWithBodyWithResponse request with any body
	PostRolesTestDynamicRoleScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesTestDynamicRoleScriptResponse, error)

	PostRolesTestDynamicRoleScriptWithResponse(ctx context.Context, body PostRolesTestDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesTestDynamicRoleScriptResponse, error)

	// PostRolesUnAssignSuperRightsWithBodyWithResponse request with any body
	PostRolesUnAssignSuperRightsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesUnAssignSuperRightsResponse, error)

	PostRolesUnAssignSuperRightsWithResponse(ctx context.Context, body PostRolesUnAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesUnAssignSuperRightsResponse, error)

	// PostRolesUpdateRoleWithBodyWithResponse request with any body
	PostRolesUpdateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesUpdateRoleResponse, error)

	PostRolesUpdateRoleWithResponse(ctx context.Context, body PostRolesUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesUpdateRoleResponse, error)

	// PostSaasManageAddUsersAndGroupsToRoleWithBodyWithResponse request with any body
	PostSaasManageAddUsersAndGroupsToRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSaasManageAddUsersAndGroupsToRoleResponse, error)

	PostSaasManageAddUsersAndGroupsToRoleWithResponse(ctx context.Context, body PostSaasManageAddUsersAndGroupsToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSaasManageAddUsersAndGroupsToRoleResponse, error)

	// PostSaasManageDeleteRolesWithBodyWithResponse request with any body
	PostSaasManageDeleteRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSaasManageDeleteRolesResponse, error)

	PostSaasManageDeleteRolesWithResponse(ctx context.Context, body PostSaasManageDeleteRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSaasManageDeleteRolesResponse, error)

	// PostSaasManageGetRoleAppsWithResponse request
	PostSaasManageGetRoleAppsWithResponse(ctx context.Context, params *PostSaasManageGetRoleAppsParams, reqEditors ...RequestEditorFn) (*PostSaasManageGetRoleAppsResponse, error)

	// PostSaasManageRemoveUsersAndGroupsFromRoleWithBodyWithResponse request with any body
	PostSaasManageRemoveUsersAndGroupsFromRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSaasManageRemoveUsersAndGroupsFromRoleResponse, error)

	PostSaasManageRemoveUsersAndGroupsFromRoleWithResponse(ctx context.Context, body PostSaasManageRemoveUsersAndGroupsFromRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSaasManageRemoveUsersAndGroupsFromRoleResponse, error)

	// PostSecurityAdvanceAuthenticationWithBodyWithResponse request with any body
	PostSecurityAdvanceAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceAuthenticationResponse, error)

	PostSecurityAdvanceAuthenticationWithResponse(ctx context.Context, body PostSecurityAdvanceAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceAuthenticationResponse, error)

	// PostSecurityAdvanceForgotUsernameWithBodyWithResponse request with any body
	PostSecurityAdvanceForgotUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceForgotUsernameResponse, error)

	PostSecurityAdvanceForgotUsernameWithResponse(ctx context.Context, body PostSecurityAdvanceForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceForgotUsernameResponse, error)

	// PostSecurityAnswerOOBChallengeWithBodyWithResponse request with any body
	PostSecurityAnswerOOBChallengeWithBodyWithResponse(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityAnswerOOBChallengeResponse, error)

	PostSecurityAnswerOOBChallengeWithResponse(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, body PostSecurityAnswerOOBChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityAnswerOOBChallengeResponse, error)

	// PostSecurityChallengeUserWithResponse request
	PostSecurityChallengeUserWithResponse(ctx context.Context, params *PostSecurityChallengeUserParams, reqEditors ...RequestEditorFn) (*PostSecurityChallengeUserResponse, error)

	// PostSecurityForgotUsernameWithBodyWithResponse request with any body
	PostSecurityForgotUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityForgotUsernameResponse, error)

	PostSecurityForgotUsernameWithResponse(ctx context.Context, body PostSecurityForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityForgotUsernameResponse, error)

	// PostSecurityLogoutWithBodyWithResponse request with any body
	PostSecurityLogoutWithBodyWithResponse(ctx context.Context, params *PostSecurityLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityLogoutResponse, error)

	PostSecurityLogoutWithResponse(ctx context.Context, params *PostSecurityLogoutParams, body PostSecurityLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityLogoutResponse, error)

	// PostSecurityStartAuthenticationWithBodyWithResponse request with any body
	PostSecurityStartAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartAuthenticationResponse, error)

	PostSecurityStartAuthenticationWithResponse(ctx context.Context, body PostSecurityStartAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartAuthenticationResponse, error)

	// PostSecurityStartChallengeWithBodyWithResponse request with any body
	PostSecurityStartChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartChallengeResponse, error)

	PostSecurityStartChallengeWithResponse(ctx context.Context, body PostSecurityStartChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartChallengeResponse, error)

	// PostSecurityStartForgotUsernameWithBodyWithResponse request with any body
	PostSecurityStartForgotUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartForgotUsernameResponse, error)

	PostSecurityStartForgotUsernameWithResponse(ctx context.Context, body PostSecurityStartForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartForgotUsernameResponse, error)

	// PostSecurityStartQRCodeAuthenticationWithBodyWithResponse request with any body
	PostSecurityStartQRCodeAuthenticationWithBodyWithResponse(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartQRCodeAuthenticationResponse, error)

	PostSecurityStartQRCodeAuthenticationWithResponse(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, body PostSecurityStartQRCodeAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartQRCodeAuthenticationResponse, error)

	// PostSecurityStartSocialAuthenticationWithBodyWithResponse request with any body
	PostSecurityStartSocialAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartSocialAuthenticationResponse, error)

	PostSecurityStartSocialAuthenticationWithResponse(ctx context.Context, body PostSecurityStartSocialAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartSocialAuthenticationResponse, error)

	// PostSecuritySubmitOathOtpCodeWithBodyWithResponse request with any body
	PostSecuritySubmitOathOtpCodeWithBodyWithResponse(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecuritySubmitOathOtpCodeResponse, error)

	PostSecuritySubmitOathOtpCodeWithResponse(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, body PostSecuritySubmitOathOtpCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecuritySubmitOathOtpCodeResponse, error)

	// PostSecuritySubmitQRCodeWithBodyWithResponse request with any body
	PostSecuritySubmitQRCodeWithBodyWithResponse(ctx context.Context, params *PostSecuritySubmitQRCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecuritySubmitQRCodeResponse, error)

	PostSecuritySubmitQRCodeWithResponse(ctx context.Context, params *PostSecuritySubmitQRCodeParams, body PostSecuritySubmitQRCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecuritySubmitQRCodeResponse, error)

	// PostU2fAnswerRegistrationChallengeWithBodyWithResponse request with any body
	PostU2fAnswerRegistrationChallengeWithBodyWithResponse(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostU2fAnswerRegistrationChallengeResponse, error)

	PostU2fAnswerRegistrationChallengeWithResponse(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, body PostU2fAnswerRegistrationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostU2fAnswerRegistrationChallengeResponse, error)

	// PostUserMgmtSignOutCurrentSessionWithResponse request
	PostUserMgmtSignOutCurrentSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUserMgmtSignOutCurrentSessionResponse, error)

	// PostUserMgmtSignOutEverywhereWithResponse request
	PostUserMgmtSignOutEverywhereWithResponse(ctx context.Context, params *PostUserMgmtSignOutEverywhereParams, reqEditors ...RequestEditorFn) (*PostUserMgmtSignOutEverywhereResponse, error)
}

type PostCoreGetAssignedAdministrativeRightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCoreGetAssignedAdministrativeRightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCoreGetAssignedAdministrativeRightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2AuthorizeAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON302      *struct {
		union json.RawMessage
	}
	JSON400 *OAuth2Authorize400Errors
	JSON500 *OAuth2Authorize500Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2AuthorizeAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2AuthorizeAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2ConfirmAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON302      *OAuth2Confirm
	JSON401      *UnauthorizedUserError
	JSON500      *OAuth2Confirm500Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2ConfirmAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2ConfirmAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2EndSessionAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON302      *OAuth2EndSession
}

// Status returns HTTPResponse.Status
func (r PostOAuth2EndSessionAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2EndSessionAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2GetMetaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuth2GetMeta
	JSON400      *OAuth2GetMeta400Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2GetMetaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2GetMetaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2IntrospectAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *OAuth2Introspect400Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2IntrospectAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2IntrospectAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2KeysAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuth2Keys
	JSON400      *OAuth2Keys400Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2KeysAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2KeysAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2RevokeAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuth2Revoke
	JSON400      *OAuth2Revoke400Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2RevokeAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2RevokeAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2TokenAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuth2Token
	JSON400      *OAuth2Token400Errors
}

// Status returns HTTPResponse.Status
func (r PostOAuth2TokenAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2TokenAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2UserInfoAppIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuth2UserInfo
	JSON400      *OAuth2UserInfo400Errors
	JSON401      *UnauthorizedUserError
}

// Status returns HTTPResponse.Status
func (r PostOAuth2UserInfoAppIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2UserInfoAppIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesAssignSuperRightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesAssignSuperRightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesAssignSuperRightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesGetRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesGetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesGetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesGetRoleMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesGetRoleMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesGetRoleMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesSetDynamicRoleScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesSetDynamicRoleScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesSetDynamicRoleScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesStoreRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesStoreRole
}

// Status returns HTTPResponse.Status
func (r PostRolesStoreRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesStoreRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesTestDynamicRoleScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesTestDynamicRoleScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesTestDynamicRoleScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesUnAssignSuperRightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesUnAssignSuperRightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesUnAssignSuperRightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRolesUpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRolesUpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRolesUpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSaasManageAddUsersAndGroupsToRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSaasManageAddUsersAndGroupsToRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSaasManageAddUsersAndGroupsToRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSaasManageDeleteRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSaasManageDeleteRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSaasManageDeleteRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSaasManageGetRoleAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSaasManageGetRoleAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSaasManageGetRoleAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSaasManageRemoveUsersAndGroupsFromRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSaasManageRemoveUsersAndGroupsFromRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSaasManageRemoveUsersAndGroupsFromRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityAdvanceAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityAdvanceAuthentication
}

// Status returns HTTPResponse.Status
func (r PostSecurityAdvanceAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityAdvanceAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityAdvanceForgotUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityAdvanceForgotUsername
}

// Status returns HTTPResponse.Status
func (r PostSecurityAdvanceForgotUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityAdvanceForgotUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityAnswerOOBChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityAnswerOOBChallenge
}

// Status returns HTTPResponse.Status
func (r PostSecurityAnswerOOBChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityAnswerOOBChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityChallengeUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityChallengeUser
}

// Status returns HTTPResponse.Status
func (r PostSecurityChallengeUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityChallengeUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityForgotUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecuritySubmitOathOtpCode
}

// Status returns HTTPResponse.Status
func (r PostSecurityForgotUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityForgotUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityLogout
}

// Status returns HTTPResponse.Status
func (r PostSecurityLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityStartAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityStartAuthentication
}

// Status returns HTTPResponse.Status
func (r PostSecurityStartAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityStartAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityStartChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityStartChallenge
}

// Status returns HTTPResponse.Status
func (r PostSecurityStartChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityStartChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityStartForgotUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityStartForgotUsername
}

// Status returns HTTPResponse.Status
func (r PostSecurityStartForgotUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityStartForgotUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityStartQRCodeAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityStartQRCodeAuthentication
}

// Status returns HTTPResponse.Status
func (r PostSecurityStartQRCodeAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityStartQRCodeAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecurityStartSocialAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityStartSocialAuthentication
}

// Status returns HTTPResponse.Status
func (r PostSecurityStartSocialAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecurityStartSocialAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecuritySubmitOathOtpCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecuritySubmitOathOtpCode
}

// Status returns HTTPResponse.Status
func (r PostSecuritySubmitOathOtpCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecuritySubmitOathOtpCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecuritySubmitQRCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecuritySubmitQRCode
}

// Status returns HTTPResponse.Status
func (r PostSecuritySubmitQRCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecuritySubmitQRCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostU2fAnswerRegistrationChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *U2fAnswerRegistrationChallenge
}

// Status returns HTTPResponse.Status
func (r PostU2fAnswerRegistrationChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostU2fAnswerRegistrationChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserMgmtSignOutCurrentSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserMgmtSignOutCurrentSession
}

// Status returns HTTPResponse.Status
func (r PostUserMgmtSignOutCurrentSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserMgmtSignOutCurrentSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserMgmtSignOutEverywhereResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserMgmtSignOutEverywhere
}

// Status returns HTTPResponse.Status
func (r PostUserMgmtSignOutEverywhereResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserMgmtSignOutEverywhereResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostCoreGetAssignedAdministrativeRightsWithResponse request returning *PostCoreGetAssignedAdministrativeRightsResponse
func (c *ClientWithResponses) PostCoreGetAssignedAdministrativeRightsWithResponse(ctx context.Context, params *PostCoreGetAssignedAdministrativeRightsParams, reqEditors ...RequestEditorFn) (*PostCoreGetAssignedAdministrativeRightsResponse, error) {
	rsp, err := c.PostCoreGetAssignedAdministrativeRights(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCoreGetAssignedAdministrativeRightsResponse(rsp)
}

// PostOAuth2AuthorizeAppIdWithResponse request returning *PostOAuth2AuthorizeAppIdResponse
func (c *ClientWithResponses) PostOAuth2AuthorizeAppIdWithResponse(ctx context.Context, appId string, params *PostOAuth2AuthorizeAppIdParams, reqEditors ...RequestEditorFn) (*PostOAuth2AuthorizeAppIdResponse, error) {
	rsp, err := c.PostOAuth2AuthorizeAppId(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2AuthorizeAppIdResponse(rsp)
}

// PostOAuth2ConfirmAppIdWithResponse request returning *PostOAuth2ConfirmAppIdResponse
func (c *ClientWithResponses) PostOAuth2ConfirmAppIdWithResponse(ctx context.Context, appId string, params *PostOAuth2ConfirmAppIdParams, reqEditors ...RequestEditorFn) (*PostOAuth2ConfirmAppIdResponse, error) {
	rsp, err := c.PostOAuth2ConfirmAppId(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2ConfirmAppIdResponse(rsp)
}

// PostOAuth2EndSessionAppIdWithResponse request returning *PostOAuth2EndSessionAppIdResponse
func (c *ClientWithResponses) PostOAuth2EndSessionAppIdWithResponse(ctx context.Context, appId string, params *PostOAuth2EndSessionAppIdParams, reqEditors ...RequestEditorFn) (*PostOAuth2EndSessionAppIdResponse, error) {
	rsp, err := c.PostOAuth2EndSessionAppId(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2EndSessionAppIdResponse(rsp)
}

// PostOAuth2GetMetaWithResponse request returning *PostOAuth2GetMetaResponse
func (c *ClientWithResponses) PostOAuth2GetMetaWithResponse(ctx context.Context, params *PostOAuth2GetMetaParams, reqEditors ...RequestEditorFn) (*PostOAuth2GetMetaResponse, error) {
	rsp, err := c.PostOAuth2GetMeta(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2GetMetaResponse(rsp)
}

// PostOAuth2IntrospectAppIdWithBodyWithResponse request with arbitrary body returning *PostOAuth2IntrospectAppIdResponse
func (c *ClientWithResponses) PostOAuth2IntrospectAppIdWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOAuth2IntrospectAppIdResponse, error) {
	rsp, err := c.PostOAuth2IntrospectAppIdWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2IntrospectAppIdResponse(rsp)
}

func (c *ClientWithResponses) PostOAuth2IntrospectAppIdWithFormdataBodyWithResponse(ctx context.Context, appId string, body PostOAuth2IntrospectAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOAuth2IntrospectAppIdResponse, error) {
	rsp, err := c.PostOAuth2IntrospectAppIdWithFormdataBody(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2IntrospectAppIdResponse(rsp)
}

// PostOAuth2KeysAppIdWithResponse request returning *PostOAuth2KeysAppIdResponse
func (c *ClientWithResponses) PostOAuth2KeysAppIdWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*PostOAuth2KeysAppIdResponse, error) {
	rsp, err := c.PostOAuth2KeysAppId(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2KeysAppIdResponse(rsp)
}

// PostOAuth2RevokeAppIdWithBodyWithResponse request with arbitrary body returning *PostOAuth2RevokeAppIdResponse
func (c *ClientWithResponses) PostOAuth2RevokeAppIdWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOAuth2RevokeAppIdResponse, error) {
	rsp, err := c.PostOAuth2RevokeAppIdWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2RevokeAppIdResponse(rsp)
}

func (c *ClientWithResponses) PostOAuth2RevokeAppIdWithFormdataBodyWithResponse(ctx context.Context, appId string, body PostOAuth2RevokeAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOAuth2RevokeAppIdResponse, error) {
	rsp, err := c.PostOAuth2RevokeAppIdWithFormdataBody(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2RevokeAppIdResponse(rsp)
}

// PostOAuth2TokenAppIdWithBodyWithResponse request with arbitrary body returning *PostOAuth2TokenAppIdResponse
func (c *ClientWithResponses) PostOAuth2TokenAppIdWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOAuth2TokenAppIdResponse, error) {
	rsp, err := c.PostOAuth2TokenAppIdWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2TokenAppIdResponse(rsp)
}

func (c *ClientWithResponses) PostOAuth2TokenAppIdWithFormdataBodyWithResponse(ctx context.Context, appId string, body PostOAuth2TokenAppIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOAuth2TokenAppIdResponse, error) {
	rsp, err := c.PostOAuth2TokenAppIdWithFormdataBody(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2TokenAppIdResponse(rsp)
}

// PostOAuth2UserInfoAppIdWithResponse request returning *PostOAuth2UserInfoAppIdResponse
func (c *ClientWithResponses) PostOAuth2UserInfoAppIdWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*PostOAuth2UserInfoAppIdResponse, error) {
	rsp, err := c.PostOAuth2UserInfoAppId(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2UserInfoAppIdResponse(rsp)
}

// PostRolesAssignSuperRightsWithBodyWithResponse request with arbitrary body returning *PostRolesAssignSuperRightsResponse
func (c *ClientWithResponses) PostRolesAssignSuperRightsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesAssignSuperRightsResponse, error) {
	rsp, err := c.PostRolesAssignSuperRightsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesAssignSuperRightsResponse(rsp)
}

func (c *ClientWithResponses) PostRolesAssignSuperRightsWithResponse(ctx context.Context, body PostRolesAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesAssignSuperRightsResponse, error) {
	rsp, err := c.PostRolesAssignSuperRights(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesAssignSuperRightsResponse(rsp)
}

// PostRolesGetRoleWithResponse request returning *PostRolesGetRoleResponse
func (c *ClientWithResponses) PostRolesGetRoleWithResponse(ctx context.Context, params *PostRolesGetRoleParams, reqEditors ...RequestEditorFn) (*PostRolesGetRoleResponse, error) {
	rsp, err := c.PostRolesGetRole(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesGetRoleResponse(rsp)
}

// PostRolesGetRoleMembersWithResponse request returning *PostRolesGetRoleMembersResponse
func (c *ClientWithResponses) PostRolesGetRoleMembersWithResponse(ctx context.Context, params *PostRolesGetRoleMembersParams, reqEditors ...RequestEditorFn) (*PostRolesGetRoleMembersResponse, error) {
	rsp, err := c.PostRolesGetRoleMembers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesGetRoleMembersResponse(rsp)
}

// PostRolesSetDynamicRoleScriptWithBodyWithResponse request with arbitrary body returning *PostRolesSetDynamicRoleScriptResponse
func (c *ClientWithResponses) PostRolesSetDynamicRoleScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesSetDynamicRoleScriptResponse, error) {
	rsp, err := c.PostRolesSetDynamicRoleScriptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesSetDynamicRoleScriptResponse(rsp)
}

func (c *ClientWithResponses) PostRolesSetDynamicRoleScriptWithResponse(ctx context.Context, body PostRolesSetDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesSetDynamicRoleScriptResponse, error) {
	rsp, err := c.PostRolesSetDynamicRoleScript(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesSetDynamicRoleScriptResponse(rsp)
}

// PostRolesStoreRoleWithBodyWithResponse request with arbitrary body returning *PostRolesStoreRoleResponse
func (c *ClientWithResponses) PostRolesStoreRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesStoreRoleResponse, error) {
	rsp, err := c.PostRolesStoreRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesStoreRoleResponse(rsp)
}

func (c *ClientWithResponses) PostRolesStoreRoleWithResponse(ctx context.Context, body PostRolesStoreRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesStoreRoleResponse, error) {
	rsp, err := c.PostRolesStoreRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesStoreRoleResponse(rsp)
}

// PostRolesTestDynamicRoleScriptWithBodyWithResponse request with arbitrary body returning *PostRolesTestDynamicRoleScriptResponse
func (c *ClientWithResponses) PostRolesTestDynamicRoleScriptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesTestDynamicRoleScriptResponse, error) {
	rsp, err := c.PostRolesTestDynamicRoleScriptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesTestDynamicRoleScriptResponse(rsp)
}

func (c *ClientWithResponses) PostRolesTestDynamicRoleScriptWithResponse(ctx context.Context, body PostRolesTestDynamicRoleScriptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesTestDynamicRoleScriptResponse, error) {
	rsp, err := c.PostRolesTestDynamicRoleScript(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesTestDynamicRoleScriptResponse(rsp)
}

// PostRolesUnAssignSuperRightsWithBodyWithResponse request with arbitrary body returning *PostRolesUnAssignSuperRightsResponse
func (c *ClientWithResponses) PostRolesUnAssignSuperRightsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesUnAssignSuperRightsResponse, error) {
	rsp, err := c.PostRolesUnAssignSuperRightsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesUnAssignSuperRightsResponse(rsp)
}

func (c *ClientWithResponses) PostRolesUnAssignSuperRightsWithResponse(ctx context.Context, body PostRolesUnAssignSuperRightsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesUnAssignSuperRightsResponse, error) {
	rsp, err := c.PostRolesUnAssignSuperRights(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesUnAssignSuperRightsResponse(rsp)
}

// PostRolesUpdateRoleWithBodyWithResponse request with arbitrary body returning *PostRolesUpdateRoleResponse
func (c *ClientWithResponses) PostRolesUpdateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRolesUpdateRoleResponse, error) {
	rsp, err := c.PostRolesUpdateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) PostRolesUpdateRoleWithResponse(ctx context.Context, body PostRolesUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRolesUpdateRoleResponse, error) {
	rsp, err := c.PostRolesUpdateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRolesUpdateRoleResponse(rsp)
}

// PostSaasManageAddUsersAndGroupsToRoleWithBodyWithResponse request with arbitrary body returning *PostSaasManageAddUsersAndGroupsToRoleResponse
func (c *ClientWithResponses) PostSaasManageAddUsersAndGroupsToRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSaasManageAddUsersAndGroupsToRoleResponse, error) {
	rsp, err := c.PostSaasManageAddUsersAndGroupsToRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageAddUsersAndGroupsToRoleResponse(rsp)
}

func (c *ClientWithResponses) PostSaasManageAddUsersAndGroupsToRoleWithResponse(ctx context.Context, body PostSaasManageAddUsersAndGroupsToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSaasManageAddUsersAndGroupsToRoleResponse, error) {
	rsp, err := c.PostSaasManageAddUsersAndGroupsToRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageAddUsersAndGroupsToRoleResponse(rsp)
}

// PostSaasManageDeleteRolesWithBodyWithResponse request with arbitrary body returning *PostSaasManageDeleteRolesResponse
func (c *ClientWithResponses) PostSaasManageDeleteRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSaasManageDeleteRolesResponse, error) {
	rsp, err := c.PostSaasManageDeleteRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageDeleteRolesResponse(rsp)
}

func (c *ClientWithResponses) PostSaasManageDeleteRolesWithResponse(ctx context.Context, body PostSaasManageDeleteRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSaasManageDeleteRolesResponse, error) {
	rsp, err := c.PostSaasManageDeleteRoles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageDeleteRolesResponse(rsp)
}

// PostSaasManageGetRoleAppsWithResponse request returning *PostSaasManageGetRoleAppsResponse
func (c *ClientWithResponses) PostSaasManageGetRoleAppsWithResponse(ctx context.Context, params *PostSaasManageGetRoleAppsParams, reqEditors ...RequestEditorFn) (*PostSaasManageGetRoleAppsResponse, error) {
	rsp, err := c.PostSaasManageGetRoleApps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageGetRoleAppsResponse(rsp)
}

// PostSaasManageRemoveUsersAndGroupsFromRoleWithBodyWithResponse request with arbitrary body returning *PostSaasManageRemoveUsersAndGroupsFromRoleResponse
func (c *ClientWithResponses) PostSaasManageRemoveUsersAndGroupsFromRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSaasManageRemoveUsersAndGroupsFromRoleResponse, error) {
	rsp, err := c.PostSaasManageRemoveUsersAndGroupsFromRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageRemoveUsersAndGroupsFromRoleResponse(rsp)
}

func (c *ClientWithResponses) PostSaasManageRemoveUsersAndGroupsFromRoleWithResponse(ctx context.Context, body PostSaasManageRemoveUsersAndGroupsFromRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSaasManageRemoveUsersAndGroupsFromRoleResponse, error) {
	rsp, err := c.PostSaasManageRemoveUsersAndGroupsFromRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSaasManageRemoveUsersAndGroupsFromRoleResponse(rsp)
}

// PostSecurityAdvanceAuthenticationWithBodyWithResponse request with arbitrary body returning *PostSecurityAdvanceAuthenticationResponse
func (c *ClientWithResponses) PostSecurityAdvanceAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceAuthenticationResponse, error) {
	rsp, err := c.PostSecurityAdvanceAuthenticationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityAdvanceAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityAdvanceAuthenticationWithResponse(ctx context.Context, body PostSecurityAdvanceAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceAuthenticationResponse, error) {
	rsp, err := c.PostSecurityAdvanceAuthentication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityAdvanceAuthenticationResponse(rsp)
}

// PostSecurityAdvanceForgotUsernameWithBodyWithResponse request with arbitrary body returning *PostSecurityAdvanceForgotUsernameResponse
func (c *ClientWithResponses) PostSecurityAdvanceForgotUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceForgotUsernameResponse, error) {
	rsp, err := c.PostSecurityAdvanceForgotUsernameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityAdvanceForgotUsernameResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityAdvanceForgotUsernameWithResponse(ctx context.Context, body PostSecurityAdvanceForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityAdvanceForgotUsernameResponse, error) {
	rsp, err := c.PostSecurityAdvanceForgotUsername(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityAdvanceForgotUsernameResponse(rsp)
}

// PostSecurityAnswerOOBChallengeWithBodyWithResponse request with arbitrary body returning *PostSecurityAnswerOOBChallengeResponse
func (c *ClientWithResponses) PostSecurityAnswerOOBChallengeWithBodyWithResponse(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityAnswerOOBChallengeResponse, error) {
	rsp, err := c.PostSecurityAnswerOOBChallengeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityAnswerOOBChallengeResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityAnswerOOBChallengeWithResponse(ctx context.Context, params *PostSecurityAnswerOOBChallengeParams, body PostSecurityAnswerOOBChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityAnswerOOBChallengeResponse, error) {
	rsp, err := c.PostSecurityAnswerOOBChallenge(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityAnswerOOBChallengeResponse(rsp)
}

// PostSecurityChallengeUserWithResponse request returning *PostSecurityChallengeUserResponse
func (c *ClientWithResponses) PostSecurityChallengeUserWithResponse(ctx context.Context, params *PostSecurityChallengeUserParams, reqEditors ...RequestEditorFn) (*PostSecurityChallengeUserResponse, error) {
	rsp, err := c.PostSecurityChallengeUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityChallengeUserResponse(rsp)
}

// PostSecurityForgotUsernameWithBodyWithResponse request with arbitrary body returning *PostSecurityForgotUsernameResponse
func (c *ClientWithResponses) PostSecurityForgotUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityForgotUsernameResponse, error) {
	rsp, err := c.PostSecurityForgotUsernameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityForgotUsernameResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityForgotUsernameWithResponse(ctx context.Context, body PostSecurityForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityForgotUsernameResponse, error) {
	rsp, err := c.PostSecurityForgotUsername(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityForgotUsernameResponse(rsp)
}

// PostSecurityLogoutWithBodyWithResponse request with arbitrary body returning *PostSecurityLogoutResponse
func (c *ClientWithResponses) PostSecurityLogoutWithBodyWithResponse(ctx context.Context, params *PostSecurityLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityLogoutResponse, error) {
	rsp, err := c.PostSecurityLogoutWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityLogoutResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityLogoutWithResponse(ctx context.Context, params *PostSecurityLogoutParams, body PostSecurityLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityLogoutResponse, error) {
	rsp, err := c.PostSecurityLogout(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityLogoutResponse(rsp)
}

// PostSecurityStartAuthenticationWithBodyWithResponse request with arbitrary body returning *PostSecurityStartAuthenticationResponse
func (c *ClientWithResponses) PostSecurityStartAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartAuthenticationResponse, error) {
	rsp, err := c.PostSecurityStartAuthenticationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityStartAuthenticationWithResponse(ctx context.Context, body PostSecurityStartAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartAuthenticationResponse, error) {
	rsp, err := c.PostSecurityStartAuthentication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartAuthenticationResponse(rsp)
}

// PostSecurityStartChallengeWithBodyWithResponse request with arbitrary body returning *PostSecurityStartChallengeResponse
func (c *ClientWithResponses) PostSecurityStartChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartChallengeResponse, error) {
	rsp, err := c.PostSecurityStartChallengeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartChallengeResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityStartChallengeWithResponse(ctx context.Context, body PostSecurityStartChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartChallengeResponse, error) {
	rsp, err := c.PostSecurityStartChallenge(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartChallengeResponse(rsp)
}

// PostSecurityStartForgotUsernameWithBodyWithResponse request with arbitrary body returning *PostSecurityStartForgotUsernameResponse
func (c *ClientWithResponses) PostSecurityStartForgotUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartForgotUsernameResponse, error) {
	rsp, err := c.PostSecurityStartForgotUsernameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartForgotUsernameResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityStartForgotUsernameWithResponse(ctx context.Context, body PostSecurityStartForgotUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartForgotUsernameResponse, error) {
	rsp, err := c.PostSecurityStartForgotUsername(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartForgotUsernameResponse(rsp)
}

// PostSecurityStartQRCodeAuthenticationWithBodyWithResponse request with arbitrary body returning *PostSecurityStartQRCodeAuthenticationResponse
func (c *ClientWithResponses) PostSecurityStartQRCodeAuthenticationWithBodyWithResponse(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartQRCodeAuthenticationResponse, error) {
	rsp, err := c.PostSecurityStartQRCodeAuthenticationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartQRCodeAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityStartQRCodeAuthenticationWithResponse(ctx context.Context, params *PostSecurityStartQRCodeAuthenticationParams, body PostSecurityStartQRCodeAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartQRCodeAuthenticationResponse, error) {
	rsp, err := c.PostSecurityStartQRCodeAuthentication(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartQRCodeAuthenticationResponse(rsp)
}

// PostSecurityStartSocialAuthenticationWithBodyWithResponse request with arbitrary body returning *PostSecurityStartSocialAuthenticationResponse
func (c *ClientWithResponses) PostSecurityStartSocialAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecurityStartSocialAuthenticationResponse, error) {
	rsp, err := c.PostSecurityStartSocialAuthenticationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartSocialAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) PostSecurityStartSocialAuthenticationWithResponse(ctx context.Context, body PostSecurityStartSocialAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecurityStartSocialAuthenticationResponse, error) {
	rsp, err := c.PostSecurityStartSocialAuthentication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecurityStartSocialAuthenticationResponse(rsp)
}

// PostSecuritySubmitOathOtpCodeWithBodyWithResponse request with arbitrary body returning *PostSecuritySubmitOathOtpCodeResponse
func (c *ClientWithResponses) PostSecuritySubmitOathOtpCodeWithBodyWithResponse(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecuritySubmitOathOtpCodeResponse, error) {
	rsp, err := c.PostSecuritySubmitOathOtpCodeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecuritySubmitOathOtpCodeResponse(rsp)
}

func (c *ClientWithResponses) PostSecuritySubmitOathOtpCodeWithResponse(ctx context.Context, params *PostSecuritySubmitOathOtpCodeParams, body PostSecuritySubmitOathOtpCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecuritySubmitOathOtpCodeResponse, error) {
	rsp, err := c.PostSecuritySubmitOathOtpCode(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecuritySubmitOathOtpCodeResponse(rsp)
}

// PostSecuritySubmitQRCodeWithBodyWithResponse request with arbitrary body returning *PostSecuritySubmitQRCodeResponse
func (c *ClientWithResponses) PostSecuritySubmitQRCodeWithBodyWithResponse(ctx context.Context, params *PostSecuritySubmitQRCodeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecuritySubmitQRCodeResponse, error) {
	rsp, err := c.PostSecuritySubmitQRCodeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecuritySubmitQRCodeResponse(rsp)
}

func (c *ClientWithResponses) PostSecuritySubmitQRCodeWithResponse(ctx context.Context, params *PostSecuritySubmitQRCodeParams, body PostSecuritySubmitQRCodeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecuritySubmitQRCodeResponse, error) {
	rsp, err := c.PostSecuritySubmitQRCode(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecuritySubmitQRCodeResponse(rsp)
}

// PostU2fAnswerRegistrationChallengeWithBodyWithResponse request with arbitrary body returning *PostU2fAnswerRegistrationChallengeResponse
func (c *ClientWithResponses) PostU2fAnswerRegistrationChallengeWithBodyWithResponse(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostU2fAnswerRegistrationChallengeResponse, error) {
	rsp, err := c.PostU2fAnswerRegistrationChallengeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostU2fAnswerRegistrationChallengeResponse(rsp)
}

func (c *ClientWithResponses) PostU2fAnswerRegistrationChallengeWithResponse(ctx context.Context, params *PostU2fAnswerRegistrationChallengeParams, body PostU2fAnswerRegistrationChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostU2fAnswerRegistrationChallengeResponse, error) {
	rsp, err := c.PostU2fAnswerRegistrationChallenge(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostU2fAnswerRegistrationChallengeResponse(rsp)
}

// PostUserMgmtSignOutCurrentSessionWithResponse request returning *PostUserMgmtSignOutCurrentSessionResponse
func (c *ClientWithResponses) PostUserMgmtSignOutCurrentSessionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostUserMgmtSignOutCurrentSessionResponse, error) {
	rsp, err := c.PostUserMgmtSignOutCurrentSession(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserMgmtSignOutCurrentSessionResponse(rsp)
}

// PostUserMgmtSignOutEverywhereWithResponse request returning *PostUserMgmtSignOutEverywhereResponse
func (c *ClientWithResponses) PostUserMgmtSignOutEverywhereWithResponse(ctx context.Context, params *PostUserMgmtSignOutEverywhereParams, reqEditors ...RequestEditorFn) (*PostUserMgmtSignOutEverywhereResponse, error) {
	rsp, err := c.PostUserMgmtSignOutEverywhere(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserMgmtSignOutEverywhereResponse(rsp)
}

// ParsePostCoreGetAssignedAdministrativeRightsResponse parses an HTTP response from a PostCoreGetAssignedAdministrativeRightsWithResponse call
func ParsePostCoreGetAssignedAdministrativeRightsResponse(rsp *http.Response) (*PostCoreGetAssignedAdministrativeRightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCoreGetAssignedAdministrativeRightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOAuth2AuthorizeAppIdResponse parses an HTTP response from a PostOAuth2AuthorizeAppIdWithResponse call
func ParsePostOAuth2AuthorizeAppIdResponse(rsp *http.Response) (*PostOAuth2AuthorizeAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2AuthorizeAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 302:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON302 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2Authorize400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest OAuth2Authorize500Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOAuth2ConfirmAppIdResponse parses an HTTP response from a PostOAuth2ConfirmAppIdWithResponse call
func ParsePostOAuth2ConfirmAppIdResponse(rsp *http.Response) (*PostOAuth2ConfirmAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2ConfirmAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 302:
		var dest OAuth2Confirm
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON302 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedUserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest OAuth2Confirm500Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostOAuth2EndSessionAppIdResponse parses an HTTP response from a PostOAuth2EndSessionAppIdWithResponse call
func ParsePostOAuth2EndSessionAppIdResponse(rsp *http.Response) (*PostOAuth2EndSessionAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2EndSessionAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 302:
		var dest OAuth2EndSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON302 = &dest

	}

	return response, nil
}

// ParsePostOAuth2GetMetaResponse parses an HTTP response from a PostOAuth2GetMetaWithResponse call
func ParsePostOAuth2GetMetaResponse(rsp *http.Response) (*PostOAuth2GetMetaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2GetMetaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuth2GetMeta
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2GetMeta400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOAuth2IntrospectAppIdResponse parses an HTTP response from a PostOAuth2IntrospectAppIdWithResponse call
func ParsePostOAuth2IntrospectAppIdResponse(rsp *http.Response) (*PostOAuth2IntrospectAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2IntrospectAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2Introspect400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOAuth2KeysAppIdResponse parses an HTTP response from a PostOAuth2KeysAppIdWithResponse call
func ParsePostOAuth2KeysAppIdResponse(rsp *http.Response) (*PostOAuth2KeysAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2KeysAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuth2Keys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2Keys400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOAuth2RevokeAppIdResponse parses an HTTP response from a PostOAuth2RevokeAppIdWithResponse call
func ParsePostOAuth2RevokeAppIdResponse(rsp *http.Response) (*PostOAuth2RevokeAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2RevokeAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuth2Revoke
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2Revoke400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOAuth2TokenAppIdResponse parses an HTTP response from a PostOAuth2TokenAppIdWithResponse call
func ParsePostOAuth2TokenAppIdResponse(rsp *http.Response) (*PostOAuth2TokenAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2TokenAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuth2Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2Token400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOAuth2UserInfoAppIdResponse parses an HTTP response from a PostOAuth2UserInfoAppIdWithResponse call
func ParsePostOAuth2UserInfoAppIdResponse(rsp *http.Response) (*PostOAuth2UserInfoAppIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2UserInfoAppIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuth2UserInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2UserInfo400Errors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedUserError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostRolesAssignSuperRightsResponse parses an HTTP response from a PostRolesAssignSuperRightsWithResponse call
func ParsePostRolesAssignSuperRightsResponse(rsp *http.Response) (*PostRolesAssignSuperRightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesAssignSuperRightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRolesGetRoleResponse parses an HTTP response from a PostRolesGetRoleWithResponse call
func ParsePostRolesGetRoleResponse(rsp *http.Response) (*PostRolesGetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesGetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRolesGetRoleMembersResponse parses an HTTP response from a PostRolesGetRoleMembersWithResponse call
func ParsePostRolesGetRoleMembersResponse(rsp *http.Response) (*PostRolesGetRoleMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesGetRoleMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRolesSetDynamicRoleScriptResponse parses an HTTP response from a PostRolesSetDynamicRoleScriptWithResponse call
func ParsePostRolesSetDynamicRoleScriptResponse(rsp *http.Response) (*PostRolesSetDynamicRoleScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesSetDynamicRoleScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRolesStoreRoleResponse parses an HTTP response from a PostRolesStoreRoleWithResponse call
func ParsePostRolesStoreRoleResponse(rsp *http.Response) (*PostRolesStoreRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesStoreRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesStoreRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRolesTestDynamicRoleScriptResponse parses an HTTP response from a PostRolesTestDynamicRoleScriptWithResponse call
func ParsePostRolesTestDynamicRoleScriptResponse(rsp *http.Response) (*PostRolesTestDynamicRoleScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesTestDynamicRoleScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRolesUnAssignSuperRightsResponse parses an HTTP response from a PostRolesUnAssignSuperRightsWithResponse call
func ParsePostRolesUnAssignSuperRightsResponse(rsp *http.Response) (*PostRolesUnAssignSuperRightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesUnAssignSuperRightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRolesUpdateRoleResponse parses an HTTP response from a PostRolesUpdateRoleWithResponse call
func ParsePostRolesUpdateRoleResponse(rsp *http.Response) (*PostRolesUpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRolesUpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSaasManageAddUsersAndGroupsToRoleResponse parses an HTTP response from a PostSaasManageAddUsersAndGroupsToRoleWithResponse call
func ParsePostSaasManageAddUsersAndGroupsToRoleResponse(rsp *http.Response) (*PostSaasManageAddUsersAndGroupsToRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSaasManageAddUsersAndGroupsToRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSaasManageDeleteRolesResponse parses an HTTP response from a PostSaasManageDeleteRolesWithResponse call
func ParsePostSaasManageDeleteRolesResponse(rsp *http.Response) (*PostSaasManageDeleteRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSaasManageDeleteRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSaasManageGetRoleAppsResponse parses an HTTP response from a PostSaasManageGetRoleAppsWithResponse call
func ParsePostSaasManageGetRoleAppsResponse(rsp *http.Response) (*PostSaasManageGetRoleAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSaasManageGetRoleAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSaasManageRemoveUsersAndGroupsFromRoleResponse parses an HTTP response from a PostSaasManageRemoveUsersAndGroupsFromRoleWithResponse call
func ParsePostSaasManageRemoveUsersAndGroupsFromRoleResponse(rsp *http.Response) (*PostSaasManageRemoveUsersAndGroupsFromRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSaasManageRemoveUsersAndGroupsFromRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSecurityAdvanceAuthenticationResponse parses an HTTP response from a PostSecurityAdvanceAuthenticationWithResponse call
func ParsePostSecurityAdvanceAuthenticationResponse(rsp *http.Response) (*PostSecurityAdvanceAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityAdvanceAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityAdvanceAuthentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityAdvanceForgotUsernameResponse parses an HTTP response from a PostSecurityAdvanceForgotUsernameWithResponse call
func ParsePostSecurityAdvanceForgotUsernameResponse(rsp *http.Response) (*PostSecurityAdvanceForgotUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityAdvanceForgotUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityAdvanceForgotUsername
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityAnswerOOBChallengeResponse parses an HTTP response from a PostSecurityAnswerOOBChallengeWithResponse call
func ParsePostSecurityAnswerOOBChallengeResponse(rsp *http.Response) (*PostSecurityAnswerOOBChallengeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityAnswerOOBChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityAnswerOOBChallenge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityChallengeUserResponse parses an HTTP response from a PostSecurityChallengeUserWithResponse call
func ParsePostSecurityChallengeUserResponse(rsp *http.Response) (*PostSecurityChallengeUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityChallengeUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityChallengeUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityForgotUsernameResponse parses an HTTP response from a PostSecurityForgotUsernameWithResponse call
func ParsePostSecurityForgotUsernameResponse(rsp *http.Response) (*PostSecurityForgotUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityForgotUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecuritySubmitOathOtpCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityLogoutResponse parses an HTTP response from a PostSecurityLogoutWithResponse call
func ParsePostSecurityLogoutResponse(rsp *http.Response) (*PostSecurityLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityLogout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityStartAuthenticationResponse parses an HTTP response from a PostSecurityStartAuthenticationWithResponse call
func ParsePostSecurityStartAuthenticationResponse(rsp *http.Response) (*PostSecurityStartAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityStartAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityStartAuthentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityStartChallengeResponse parses an HTTP response from a PostSecurityStartChallengeWithResponse call
func ParsePostSecurityStartChallengeResponse(rsp *http.Response) (*PostSecurityStartChallengeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityStartChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityStartChallenge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityStartForgotUsernameResponse parses an HTTP response from a PostSecurityStartForgotUsernameWithResponse call
func ParsePostSecurityStartForgotUsernameResponse(rsp *http.Response) (*PostSecurityStartForgotUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityStartForgotUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityStartForgotUsername
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityStartQRCodeAuthenticationResponse parses an HTTP response from a PostSecurityStartQRCodeAuthenticationWithResponse call
func ParsePostSecurityStartQRCodeAuthenticationResponse(rsp *http.Response) (*PostSecurityStartQRCodeAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityStartQRCodeAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityStartQRCodeAuthentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecurityStartSocialAuthenticationResponse parses an HTTP response from a PostSecurityStartSocialAuthenticationWithResponse call
func ParsePostSecurityStartSocialAuthenticationResponse(rsp *http.Response) (*PostSecurityStartSocialAuthenticationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecurityStartSocialAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityStartSocialAuthentication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecuritySubmitOathOtpCodeResponse parses an HTTP response from a PostSecuritySubmitOathOtpCodeWithResponse call
func ParsePostSecuritySubmitOathOtpCodeResponse(rsp *http.Response) (*PostSecuritySubmitOathOtpCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecuritySubmitOathOtpCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecuritySubmitOathOtpCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSecuritySubmitQRCodeResponse parses an HTTP response from a PostSecuritySubmitQRCodeWithResponse call
func ParsePostSecuritySubmitQRCodeResponse(rsp *http.Response) (*PostSecuritySubmitQRCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecuritySubmitQRCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecuritySubmitQRCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostU2fAnswerRegistrationChallengeResponse parses an HTTP response from a PostU2fAnswerRegistrationChallengeWithResponse call
func ParsePostU2fAnswerRegistrationChallengeResponse(rsp *http.Response) (*PostU2fAnswerRegistrationChallengeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostU2fAnswerRegistrationChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest U2fAnswerRegistrationChallenge
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserMgmtSignOutCurrentSessionResponse parses an HTTP response from a PostUserMgmtSignOutCurrentSessionWithResponse call
func ParsePostUserMgmtSignOutCurrentSessionResponse(rsp *http.Response) (*PostUserMgmtSignOutCurrentSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserMgmtSignOutCurrentSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserMgmtSignOutCurrentSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserMgmtSignOutEverywhereResponse parses an HTTP response from a PostUserMgmtSignOutEverywhereWithResponse call
func ParsePostUserMgmtSignOutEverywhereResponse(rsp *http.Response) (*PostUserMgmtSignOutEverywhereResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserMgmtSignOutEverywhereResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserMgmtSignOutEverywhere
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
